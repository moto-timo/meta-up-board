From a06d1c41ab898dcd3a70b1242fe8b6b4686dc16e Mon Sep 17 00:00:00 2001
From: Michael Campion <michael.campion@emutex.com>
Date: Thu, 4 Jul 2019 13:03:51 +0100
Subject: [PATCH 22/30] pinctrl-core: translate gpio to pin before config

This commit reverts e73fcf0459e9c63bd55a9acf2f85cbf9e9c77f67 and performs the
gpio to pin translation using the same method as pinctrl_gpio_direction.
---
 drivers/pinctrl/core.c | 39 ++++++++++++++++++++++++++-------------
 1 file changed, 26 insertions(+), 13 deletions(-)

diff --git a/drivers/pinctrl/core.c b/drivers/pinctrl/core.c
index 245e628046fe..3b1f376c80ec 100755
--- a/drivers/pinctrl/core.c
+++ b/drivers/pinctrl/core.c
@@ -972,6 +972,26 @@ int pinctrl_gpio_direction_output(unsigned gpio)
 }
 EXPORT_SYMBOL_GPL(pinctrl_gpio_direction_output);
 
+static int pinctrl_set_config_if_match(struct pinctrl_dev *pctldev,
+					unsigned int gpio, unsigned long config)
+{
+	struct pinctrl_gpio_range *range;
+	int ret = 0;
+
+	range = pinctrl_match_gpio_range(pctldev, gpio);
+
+	if (range != NULL) {
+		int pin;
+
+		mutex_lock(&pctldev->mutex);
+		pin = gpio_to_pin(range, gpio);
+		ret = pinconf_set_config(pctldev, pin, &config, 1);
+		mutex_unlock(&pctldev->mutex);
+	}
+
+	return ret;
+}
+
 /**
  * pinctrl_gpio_set_config() - Apply config to given GPIO pin
  * @gpio: the GPIO pin number from the GPIO subsystem number space
@@ -983,11 +1003,8 @@ EXPORT_SYMBOL_GPL(pinctrl_gpio_direction_output);
  */
 int pinctrl_gpio_set_config(unsigned gpio, unsigned long config)
 {
-	unsigned long configs[] = { config };
-	struct pinctrl_gpio_range *range = NULL;
 	struct pinctrl_dev *pctldev;
 	struct gpio_desc *desc;
-	int pin;
 	int dir;
 	int ret = -EPROBE_DEFER;
 
@@ -1014,19 +1031,15 @@ int pinctrl_gpio_set_config(unsigned gpio, unsigned long config)
 	 */
 	if (dir == 1) {
 		list_for_each_entry(pctldev, &pinctrldev_list, node) {
-			range = pinctrl_match_gpio_range(pctldev, gpio);
-			if (range == NULL)
-				continue;
-			pin = gpio_to_pin(range, gpio);
-			ret = pinconf_set_config(pctldev, pin, configs, ARRAY_SIZE(configs));
+			ret = pinctrl_set_config_if_match(pctldev, gpio, config);
+			if (ret)
+				break;
 		}
 	} else {
 		list_for_each_entry_reverse(pctldev, &pinctrldev_list, node) {
-			range = pinctrl_match_gpio_range(pctldev, gpio);
-			if (range == NULL)
-				continue;
-			pin = gpio_to_pin(range, gpio);
-			ret = pinconf_set_config(pctldev, pin, configs, ARRAY_SIZE(configs));
+			ret = pinctrl_set_config_if_match(pctldev, gpio, config);
+			if (ret)
+				break;
 		}
 	}
 
-- 
2.17.1

