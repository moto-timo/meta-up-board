From 6c77686f7821c64df4e515279b0cbf58ceb425f5 Mon Sep 17 00:00:00 2001
From: Even Xu <even.xu@intel.com>
Date: Tue, 13 Jul 2021 13:52:40 +0800
Subject: [PATCH] hid: intel-ish-hid: ipc: set/clear D0i3 bit during
 suspend/resume

This is a sw workaround for EHL hw CATErr fix.

Signed-off-by: Even Xu <even.xu@intel.com>
---
 drivers/hid/intel-ish-hid/ipc/pci-ish.c | 47 +++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/drivers/hid/intel-ish-hid/ipc/pci-ish.c b/drivers/hid/intel-ish-hid/ipc/pci-ish.c
index 4d5b52c..60267f8 100644
--- a/drivers/hid/intel-ish-hid/ipc/pci-ish.c
+++ b/drivers/hid/intel-ish-hid/ipc/pci-ish.c
@@ -23,6 +23,13 @@
 #include "ishtp-dev.h"
 #include "hw-ish.h"
 
+#define ISH_D0I3C 0x06D0
+#define ISH_HOST_COMM 0x0038
+#define ISH_D0I3_CIP BIT(0)
+#define ISH_D0I3_EN BIT(2)
+#define ISH_D0I3_RR BIT(3)
+#define ISH_CGSR_CG BIT(16)
+
 static const struct pci_device_id ish_pci_tbl[] = {
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, CHV_DEVICE_ID)},
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, BXT_Ax_DEVICE_ID)},
@@ -287,6 +294,40 @@ static void __maybe_unused ish_resume_handler(struct work_struct *work)
 	}
 }
 
+void handle_d0i3(struct device *device, bool set)
+{
+	struct pci_dev *pdev = to_pci_dev(device);
+	struct ishtp_device *dev = pci_get_drvdata(pdev);
+	struct ish_hw *hw;
+	uint32_t d0i3c_val;
+	unsigned long j0, j1, delay;
+
+	delay = msecs_to_jiffies(100);
+	j0 = jiffies;
+	j1 = j0 + delay;
+
+	hw = to_ish_hw(dev);
+	d0i3c_val = readl(hw->mem_addr + ISH_D0I3C);
+
+	if (set)
+		writel((d0i3c_val|ISH_D0I3_EN), hw->mem_addr + ISH_D0I3C);
+	else
+		writel((d0i3c_val & ~ISH_D0I3_EN), hw->mem_addr + ISH_D0I3C);
+
+	d0i3c_val = readl(hw->mem_addr + ISH_D0I3C);
+
+	while (time_before(jiffies, j1)) {
+		d0i3c_val = readl(hw->mem_addr + ISH_D0I3C);
+		if (!(d0i3c_val & ISH_D0I3_CIP))
+			break;
+	}
+
+	if (d0i3c_val & ISH_D0I3_CIP)
+		dev_info(device, "%s: timeout waiting CIP to be cleared",
+							__func__);
+}
+
+
 /**
  * ish_suspend() - ISH suspend callback
  * @device:	device pointer
@@ -329,6 +370,10 @@ static int __maybe_unused ish_suspend(struct device *device)
 			pdev->dev_flags |= PCI_DEV_FLAGS_NO_D3;
 
 			enable_irq_wake(pdev->irq);
+
+			if (dev->pdev->device == EHL_Ax_DEVICE_ID)
+				handle_d0i3(device, 1);
+
 		}
 	} else {
 		/*
@@ -357,6 +402,8 @@ static int __maybe_unused ish_resume(struct device *device)
 
 	/* add this to finish power flow for EHL */
 	if (dev->pdev->device == EHL_Ax_DEVICE_ID) {
+		handle_d0i3(device, 0);
+
 		pci_set_power_state(pdev, PCI_D0);
 		enable_pme_wake(pdev);
 		dev_dbg(dev->devc, "set power state to D0 for ehl\n");
-- 
2.7.4

