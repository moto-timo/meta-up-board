From f300ec8aa6cdbd2e1e7f6421b42453f115bc58db Mon Sep 17 00:00:00 2001
From: Carlos Calderon <carlos@emutex.com>
Date: Thu, 26 Nov 2020 09:58:40 +0800
Subject: [PATCH 03/30] pinctrl: allow multiple pin controllers for a GPIO

Add support for chaining pinctrl drivers controlling the same GPIO line.
This allows for hardware configurations where multiple controllers must
to be configured to change the function or electrical properties of the
line.

Such is the case of the UP board family. On these boards, GPIO and other
SoC functions are provided by a 40-pin Raspberry Pi compatible header,
plus custom headers on certain models. However, for added flexibility,
there is a FPGA between the SoC and these physical pins. In its default
configuration, this FPGA implements a pin controller for FPGA-connected
pins. This setup requires coordination between the SoC GPIO controller
and the FPGA-based controller, hence this patch.
---
 drivers/pinctrl/core.c | 227 +++++++++++++++++++++++++++++++----------
 1 file changed, 172 insertions(+), 55 deletions(-)
 mode change 100644 => 100755 drivers/pinctrl/core.c

diff --git a/drivers/pinctrl/core.c b/drivers/pinctrl/core.c
old mode 100644
new mode 100755
index 6381745e3bb1..96250717637a
--- a/drivers/pinctrl/core.c
+++ b/drivers/pinctrl/core.c
@@ -264,8 +264,7 @@ static int pinctrl_register_pins(struct pinctrl_dev *pctldev,
  * and pin list based GPIO ranges is managed correctly by this function.
  *
  * This function assumes the gpio is part of the specified GPIO range, use
- * only after making sure this is the case (e.g. by calling it on the
- * result of successful pinctrl_get_device_gpio_range calls)!
+ * only after making sure this is the case!
  */
 static inline int gpio_to_pin(struct pinctrl_gpio_range *range,
 				unsigned int gpio)
@@ -318,7 +317,7 @@ pinctrl_match_gpio_range(struct pinctrl_dev *pctldev, unsigned gpio)
  * is false, it means that pinctrl device may not be ready.
  */
 #ifdef CONFIG_GPIOLIB
-static bool pinctrl_ready_for_gpio_range(unsigned gpio)
+static bool __attribute__((unused))pinctrl_ready_for_gpio_range(unsigned gpio)
 {
 	struct pinctrl_dev *pctldev;
 	struct pinctrl_gpio_range *range = NULL;
@@ -350,7 +349,7 @@ static bool pinctrl_ready_for_gpio_range(unsigned gpio)
 	return false;
 }
 #else
-static bool pinctrl_ready_for_gpio_range(unsigned gpio) { return true; }
+static bool __attribute__((unused))pinctrl_ready_for_gpio_range(unsigned gpio) { return true; }
 #endif
 
 /**
@@ -704,6 +703,57 @@ static inline void pinctrl_generic_free_groups(struct pinctrl_dev *pctldev)
 }
 #endif /* CONFIG_GENERIC_PINCTRL_GROUPS */
 
+void pinctrl_free_gpio_locked(unsigned int gpio)
+{
+	struct pinctrl_dev *pctldev;
+
+	list_for_each_entry(pctldev, &pinctrldev_list, node) {
+		struct pinctrl_gpio_range *range =
+			pinctrl_match_gpio_range(pctldev, gpio);
+		if (range != NULL) {
+			int pin;
+
+			mutex_lock(&pctldev->mutex);
+			pin = gpio_to_pin(range, gpio);
+			pinmux_free_gpio(pctldev, pin, range);
+			mutex_unlock(&pctldev->mutex);
+		}
+	}
+}
+
+static int pinctrl_request_if_match(struct pinctrl_dev *pctldev,
+				    unsigned int gpio, int dir)
+{
+	struct pinctrl_gpio_range *range =
+		pinctrl_match_gpio_range(pctldev, gpio);
+	int ret;
+
+	if (range != NULL) {
+		int pin;
+
+		mutex_lock(&pctldev->mutex);
+		pin = gpio_to_pin(range, gpio);
+
+		ret = pinmux_request_gpio(pctldev, range, pin, gpio);
+		if (ret) {
+			mutex_unlock(&pctldev->mutex);
+			return ret;
+		}
+
+		if (dir >= 0) {
+			ret = pinmux_gpio_direction(pctldev, range, pin, dir);
+			if (ret) {
+				mutex_unlock(&pctldev->mutex);
+				return ret;
+			}
+		}
+		mutex_unlock(&pctldev->mutex);
+
+	}
+
+	return 0;
+}
+
 /**
  * pinctrl_get_group_selector() - returns the group selector for a group
  * @pctldev: the pin controller handling the group
@@ -772,28 +822,53 @@ EXPORT_SYMBOL_GPL(pinctrl_gpio_can_use_line);
  * as part of their gpio_request() semantics, platforms and individual drivers
  * shall *NOT* request GPIO pins to be muxed in.
  */
-int pinctrl_gpio_request(unsigned gpio)
+int pinctrl_gpio_request(unsigned int gpio)
 {
 	struct pinctrl_dev *pctldev;
-	struct pinctrl_gpio_range *range;
-	int ret;
-	int pin;
+	struct gpio_desc *desc;
+	int dir;
+	int ret = -EPROBE_DEFER;
 
-	ret = pinctrl_get_device_gpio_range(gpio, &pctldev, &range);
-	if (ret) {
-		if (pinctrl_ready_for_gpio_range(gpio))
-			ret = 0;
-		return ret;
+	desc = gpio_to_desc(gpio);
+	if (!desc) {
+		pr_err("gpio_to_desc(%d) returned NULL", gpio);
+		return -ENODEV;
 	}
 
-	mutex_lock(&pctldev->mutex);
+	dir = gpiod_get_direction(desc);
 
-	/* Convert to the pin controllers number space */
-	pin = gpio_to_pin(range, gpio);
+	mutex_lock(&pinctrldev_list_mutex);
 
-	ret = pinmux_request_gpio(pctldev, range, pin, gpio);
+	/*
+	 * NOTE: this code suppose that if we have multiple pinctrl declared for
+	 * the same gpio those are configured in series.
+	 * In this situation we need to avoid the case were momentarely
+	 * multiple pinctrl try do drive the same line to a different logic value
+	 *
+	 * (1st pinctrl) 1>-----<0 (2nd pinctrl)
+	 *
+	 * To obtain that we need to mind the order in which the multiple pinctrl
+	 * are configured depending of the desired gpio direction (input, output)
+	 */
+	if (dir == 1) {
+		list_for_each_entry(pctldev, &pinctrldev_list, node) {
+			ret = pinctrl_request_if_match(pctldev, gpio, dir);
+			if (ret) {
+				pinctrl_free_gpio_locked(gpio);
+				break;
+			}
+		}
+	} else {
+		list_for_each_entry_reverse(pctldev, &pinctrldev_list, node) {
+			ret = pinctrl_request_if_match(pctldev, gpio, dir);
+			if (ret) {
+				pinctrl_free_gpio_locked(gpio);
+				break;
+			}
+		}
+	}
 
-	mutex_unlock(&pctldev->mutex);
+	mutex_unlock(&pinctrldev_list_mutex);
 
 	return ret;
 }
@@ -807,47 +882,64 @@ EXPORT_SYMBOL_GPL(pinctrl_gpio_request);
  * as part of their gpio_free() semantics, platforms and individual drivers
  * shall *NOT* request GPIO pins to be muxed out.
  */
-void pinctrl_gpio_free(unsigned gpio)
+void pinctrl_gpio_free(unsigned int gpio)
 {
-	struct pinctrl_dev *pctldev;
-	struct pinctrl_gpio_range *range;
-	int ret;
-	int pin;
+	mutex_lock(&pinctrldev_list_mutex);
 
-	ret = pinctrl_get_device_gpio_range(gpio, &pctldev, &range);
-	if (ret) {
-		return;
-	}
-	mutex_lock(&pctldev->mutex);
+	pinctrl_free_gpio_locked(gpio);
 
-	/* Convert to the pin controllers number space */
-	pin = gpio_to_pin(range, gpio);
+	mutex_unlock(&pinctrldev_list_mutex);
+}
+EXPORT_SYMBOL_GPL(pinctrl_gpio_free);
 
-	pinmux_free_gpio(pctldev, pin, range);
+static int pinctrl_set_dir_if_match(struct pinctrl_dev *pctldev,
+				    unsigned int gpio, bool input)
+{
+	struct pinctrl_gpio_range *range =
+		pinctrl_match_gpio_range(pctldev, gpio);
+	int ret = 0;
 
-	mutex_unlock(&pctldev->mutex);
+	if (range != NULL) {
+		int pin;
+
+		mutex_lock(&pctldev->mutex);
+		pin = gpio_to_pin(range, gpio);
+		ret = pinmux_gpio_direction(pctldev, range, pin, input);
+		mutex_unlock(&pctldev->mutex);
+	}
+
+	return ret;
 }
-EXPORT_SYMBOL_GPL(pinctrl_gpio_free);
 
 static int pinctrl_gpio_direction(unsigned gpio, bool input)
 {
 	struct pinctrl_dev *pctldev;
-	struct pinctrl_gpio_range *range;
-	int ret;
-	int pin;
-
-	ret = pinctrl_get_device_gpio_range(gpio, &pctldev, &range);
-	if (ret) {
-		return ret;
-	}
+	int ret = -EPROBE_DEFER;
 
-	mutex_lock(&pctldev->mutex);
+	mutex_lock(&pinctrldev_list_mutex);
 
-	/* Convert to the pin controllers number space */
-	pin = gpio_to_pin(range, gpio);
-	ret = pinmux_gpio_direction(pctldev, range, pin, input);
+	/*
+	 * FIXME UP-specific
+	 * The two pin controllers (SoC, FPGA) share the GPIO line. Avoid
+	 * getting into a situation where both are momentarily trying to drive
+	 * the line (i.e. SoC as output and FPGA as HAT-to-SoC input) by walking
+	 * the list in opposite directions for the input and output cases.
+	 */
+	if (input) {
+		list_for_each_entry(pctldev, &pinctrldev_list, node) {
+			ret = pinctrl_set_dir_if_match(pctldev, gpio, input);
+			if (ret)
+				break;
+		}
+	} else {
+		list_for_each_entry_reverse(pctldev, &pinctrldev_list, node) {
+			ret = pinctrl_set_dir_if_match(pctldev, gpio, input);
+			if (ret)
+				break;
+		}
+	}
 
-	mutex_unlock(&pctldev->mutex);
+	mutex_unlock(&pinctrldev_list_mutex);
 
 	return ret;
 }
@@ -892,18 +984,43 @@ EXPORT_SYMBOL_GPL(pinctrl_gpio_direction_output);
 int pinctrl_gpio_set_config(unsigned gpio, unsigned long config)
 {
 	unsigned long configs[] = { config };
-	struct pinctrl_gpio_range *range;
 	struct pinctrl_dev *pctldev;
-	int ret, pin;
+	struct gpio_desc *desc;
+	int dir;
+	int ret = -EPROBE_DEFER;
 
-	ret = pinctrl_get_device_gpio_range(gpio, &pctldev, &range);
-	if (ret)
-		return ret;
+	desc = gpio_to_desc(gpio);
+	if (!desc) {
+		pr_err("gpio_to_desc(%d) returned NULL", gpio);
+		return -ENODEV;
+	}
 
-	mutex_lock(&pctldev->mutex);
-	pin = gpio_to_pin(range, gpio);
-	ret = pinconf_set_config(pctldev, pin, configs, ARRAY_SIZE(configs));
-	mutex_unlock(&pctldev->mutex);
+	dir = gpiod_get_direction(desc);
+
+	mutex_lock(&pinctrldev_list_mutex);
+
+	/*
+	 * NOTE: this code suppose that if we have multiple pinctrl declared for
+	 * the same gpio those are configured in series.
+	 * In this situation we need to avoid the case were momentarely
+	 * multiple pinctrl try do drive the same line to a different logic value
+	 *
+	 * (1st pinctrl) 1>-----<0 (2nd pinctrl)
+	 *
+	 * To obtain that we need to mind the order in which the multiple pinctrl
+	 * are configured depending of the desired gpio direction (input, output)
+	 */
+	if (dir == 1) {
+		list_for_each_entry(pctldev, &pinctrldev_list, node) {
+			ret = pinconf_set_config(pctldev, gpio, configs, ARRAY_SIZE(configs));
+		}
+	} else {
+		list_for_each_entry_reverse(pctldev, &pinctrldev_list, node) {
+			ret = pinconf_set_config(pctldev, gpio, configs, ARRAY_SIZE(configs));
+		}
+	}
+
+	mutex_unlock(&pinctrldev_list_mutex);
 
 	return ret;
 }
-- 
2.17.1

